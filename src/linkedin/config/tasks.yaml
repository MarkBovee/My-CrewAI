task_search:
  description: |
    Make a detailed report on the latest items featuring the topic {topic}. 
    Your final answer MUST be a list of at least 10 exciting items about {topic}
    in the format of bullet points.
  expected_output: |
    A comprehensive list of at least 10 exciting new items about {topic} with brief explanations
    of why they are trending and in demand, formatted as bullet points.
  agent: coach

task_research:
  description: |
    CRITICAL: You MUST select EXACTLY ONE item from the coach's research list about {topic}.
    Pick the most technically interesting and practical item for senior developers and DevOps engineers.
    Avoid political topics, ethics, or social issues - focus on technical substance.

    PRIMARY RESEARCH METHOD:
    **USE SEARCH_TOOL TO ACCESS HIGH-QUALITY SOURCES**: Your search_tool has access to comprehensive web search results
    containing expert articles, case studies, and authoritative sources about {topic}. This includes:
    - Medium articles by recognized developers (especially about spec-driven development vs vibe coding)
    - Technical blogs from industry experts and established publications  
    - GitHub documentation and real-world case studies
    - Developer publications like Dataconomy, Geeky Gadgets, etc.
    - Articles comparing different development methodologies

    SEARCH STRATEGY:
    1. **Search for your chosen topic** using relevant keywords
    2. **Look for expert perspectives** from established sources
    3. **Find implementation examples** and real-world case studies
    4. **Supplement with additional searches** for specific details if needed

    RESEARCH METHODOLOGY:
    - **SYNTHESIS OVER SUMMARIZATION**: Don't just list information - analyze and synthesize insights
    - **EXPERT PERSPECTIVES**: Identify and highlight expert opinions and authoritative viewpoints  
    - **PRACTICAL FOCUS**: Emphasize real-world applications, tools, and actionable insights
    - **TECHNICAL DEPTH**: Include specific technologies, methodologies, and implementation approaches
    - **COMPARATIVE ANALYSIS**: When relevant, compare different approaches or tools
    - **CREDIBLE SOURCES**: Prioritize information from established tech publications, recognized experts, and proven case studies

    RESEARCH STRUCTURE:
    1. **Executive Summary** (200 words): Key insights and why this matters to developers
    2. **Technical Deep Dive** (800+ words): How it works, key technologies, implementation approaches
    3. **Expert Analysis** (400+ words): What industry experts are saying, predictions, recommendations
    4. **Real-World Applications** (400+ words): Case studies, success stories, practical examples
    5. **Developer Impact** (300+ words): How this affects daily work, career implications, skill requirements
    6. **Implementation Guidance** (200+ words): Next steps, tools to explore, learning resources
    7. **Source Attribution**: Properly cite all sources from your searches

    TARGET: Minimum 2300 words of substantive, well-researched content that gives the writer rich material to work with.
  expected_output: |
    A comprehensive, analytically-driven research document of 2300+ words covering EXACTLY ONE {topic} skill.
    Must include expert insights, technical depth, real-world applications, and proper source attribution.
    Structure: Executive Summary, Technical Deep Dive, Expert Analysis, Real-World Applications, Developer Impact, Implementation Guidance, Sources.
  agent: researcher
  context:
    - task_search

task_blog:
  description: |
    Write a reflective and professional blog post about {topic}, grounded in real-world
    experience as a senior developer. Use the research document from the researcher as your primary source. 
    But you can use the search_tool if you need extra info to fill in gaps or add extra depth.

    STRUCTURE:
    - Open with a clear personal hook (a challenge, incident, or insight that makes the story real).
    - Move into technical exploration: what tools, frameworks, or approaches were tried.
    - Share lessons learned: what worked, what didn’t, and the trade-offs made.
    - Provide actionable recommendations for readers.
    - End with a forward-looking conclusion (inspiration, next steps, or reflections).

    TECHNICAL DEPTH:
    - Mention specific tools, frameworks, and integrations (with versions where relevant).
    - Include technical details where they add value (snippets, CLI commands, configs).
    - Discuss architecture decisions or trade-offs where applicable.

    TONE AND STYLE:
    - Professional, reflective, and approachable (thought-leadership voice).
    - Personal but not overly casual — insights backed by experience.
    - Honest about limitations, failures, and what was learned.
    - Balanced: human story + technical expertise.

    VALUE FOR AUDIENCE:
    - Address real challenges your audience of developers, engineers, and tech leads face.
    - Provide actionable insights they can take away immediately.
    - Make complex concepts accessible without oversimplifying.
    - Inspire confidence and curiosity: readers should feel "I learned something useful here."

  expected_output: |
    - A blog post between 800 and 1500 words
    - An engaging, professional headline (not clickbait, but curiosity-driven)
    - Clear structure (intro, body, conclusion with lessons learned)
    - Personal story as hook, but majority focused on insights and value
    - Specific technical details/examples (not a full tutorial, but enough to show credibility)
    - Reflective tone with practical takeaways
    - Conclusion that gives clear recommendations or next steps
  agent: writer
  context:
    - task_research

task_post:
  description: |
    Write a punchy LinkedIn post that makes people STOP scrolling and lean in.
    You're not just promoting a blog—you’re sharing a real developer insight in a way
    that sparks curiosity and conversation.
    
    HOOK FIRST:
    - Open with a relatable pain point, strong question, or surprising moment
    - Make it feel human and specific

    STORY + VALUE:
    - Give a quick glimpse of the challenge and the insight that changed everything
    - Hint at the bigger story or solution (but don’t give it all away)
    - Use plain, conversational language—like talking to a colleague over coffee
    - Add personality (frustration, relief, humor, or excitement) to make it memorable
    
    CALL TO ACTION:
    - Make readers feel curious and that they’ll miss out if they don’t click
    - Keep it authentic, not salesy
    
    LINKEDIN CONTEXT:
    - Posts should be short and scannable (50–100 words max)
    - Use line breaks for rhythm and readability
    - Add 2–4 hashtags that reach the right dev/tech audience
    - Tone: confident but humble, like an experienced dev sharing a lesson learned
    
    GOAL:
    - Create a moment where readers think: "That’s me." + "I need to know more."
    - Drive clicks to the blog while starting conversations in the comments.
  expected_output: |
    - A LinkedIn post of 50–100 words
    - Strong hook in the first line (relatable problem, question, or dramatic moment)
    - Tease of the most valuable blog insight, without full detail
    - Conversational tone, authentic voice, and human emotion
    - Smooth call-to-action that invites reading the blog
    - 2–4 strategic hashtags
    - Short, scannable structure with line breaks
  agent: influencer
  context:
    - task_blog