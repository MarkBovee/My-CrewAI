task_search:
  description: |
    Research {topic} to discover compelling, technically-specific content angles with real implementation depth.
    Focus on finding:
    - Specific technical implementation challenges and solutions
    - Concrete code examples, configurations, and best practices
    - Performance metrics, benchmarks, and measurable improvements
    - Real developer stories with specific tools, versions, and scenarios
    - Integration patterns, architectural decisions, and technical trade-offs
    - Advanced use cases, edge cases, and troubleshooting scenarios
    - Team transformation stories with specific technical details
    
    Your goal is to identify content angles that provide ACTIONABLE TECHNICAL VALUE to senior developers.
    Focus on "how to implement", "what went wrong and how we fixed it", and "here's the exact approach that worked".
    
    Your final answer MUST be a curated list of 5-7 compelling content angles about {topic}
    that focus on specific technical implementation, real-world problem-solving, and actionable insights.
  expected_output: |
    A curated list of 5-7 compelling content angles about {topic}, each with:
    - The specific technical angle/story approach (e.g., "How we migrated from X to {topic} and reduced build time by Y%")
    - Concrete technical challenges and solutions involved
    - Specific tools, versions, configurations, or code patterns discussed
    - Measurable outcomes and technical metrics
    - Target audience appeal with technical depth (why senior developers would implement this)
    - Potential personal experience hooks with specific technical scenarios
  agent: coach

task_research:
  description: |
    CONTENT ANGLE SELECTION: Choose the MOST technically compelling and implementable content angle from the coach's research
    about {topic}. Select based on:
    - Specific technical relevance to senior .NET Developer and DevOps engineer daily work
    - Availability of concrete implementation examples, code samples, and configuration details
    - Potential for detailed, step-by-step technical storytelling
    - Real-world problem-solving value and actionable insights
    
    DEEP TECHNICAL RESEARCH PHASE: Use your search_tool strategically to gather comprehensive evidence:
    
    Search Strategy:
    - Use specific technical terms, version numbers, and integration scenarios
    - Look for GitHub repositories, Stack Overflow discussions, and technical blogs
    - Search for "how to implement", "migration guide", "best practices", "troubleshooting"
    - Find real case studies with concrete metrics and implementation details
    
    Gather this supporting evidence:
    - Specific implementation examples with code snippets and configurations
    - Real performance metrics, benchmarks, and before/after comparisons
    - Common technical challenges and their detailed solutions
    - Step-by-step migration guides and setup procedures
    - Integration patterns with other tools and frameworks
    - Expert technical opinions from recognized developers and architects
    - Specific tools, workflows, and development environment setups
    
    TECHNICAL STORYTELLING SUPPORT: Find narrative elements that support detailed technical storytelling:
    - Specific technical problems encountered and solutions implemented
    - Learning curve experiences with concrete examples
    - Architecture decisions and their technical rationale
    - Performance optimization stories with measurable results
    - "Aha moments" with specific technical discoveries
    
    Base ALL findings on REAL TECHNICAL DATA with proper source attribution.
  expected_output: |
    A comprehensive technical research package for ONE compelling content angle about {topic}, including:
    - The chosen technical angle and detailed technical rationale for selection
    - Specific implementation data: code examples, configurations, setup procedures
    - Real performance metrics, benchmarks, and measurable technical outcomes
    - Detailed technical narrative elements for step-by-step implementation storytelling
    - Expert technical insights, quotes, and case studies with implementation details
    - Comprehensive sources and attribution for all technical claims
    - Specific tools, versions, frameworks, and integration requirements mentioned
  agent: researcher
  context:
    - task_search

task_blog:
  description: |
    Write a reflective and professional blog post about {topic}, grounded in real-world
    experience as a senior .NET Developer and DevOps engineer.

    STRUCTURE:
    - Open with a clear personal hook (a challenge, incident, or insight that makes the story real).
    - Move into technical exploration: what tools, frameworks, or approaches were tried.
    - Share lessons learned: what worked, what didn’t, and the trade-offs made.
    - Provide actionable recommendations for readers.
    - End with a forward-looking conclusion (inspiration, next steps, or reflections).

    TECHNICAL DEPTH:
    - Mention specific tools, frameworks, and integrations (with versions where relevant).
    - Include technical details where they add value (snippets, CLI commands, configs).
    - Share measurable improvements (metrics, benchmarks, before/after results).
    - Discuss architecture decisions or trade-offs where applicable.

    TONE AND STYLE:
    - Professional, reflective, and approachable (thought-leadership voice).
    - Personal but not overly casual — insights backed by experience.
    - Honest about limitations, failures, and what was learned.
    - Balanced: human story + technical expertise.

    VALUE FOR AUDIENCE:
    - Address real challenges your audience of developers, engineers, and tech leads face.
    - Provide actionable insights they can take away immediately.
    - Make complex concepts accessible without oversimplifying.
    - Inspire confidence and curiosity: readers should feel "I learned something useful here."

  expected_output: |
    - A blog post between 800 and 1500 words
    - An engaging, professional headline (not clickbait, but curiosity-driven)
    - Clear structure (intro, body, conclusion with lessons learned)
    - Personal story as hook, but majority focused on insights and value
    - Specific technical details/examples (not a full tutorial, but enough to show credibility)
    - Reflective tone with practical takeaways
    - Conclusion that gives clear recommendations or next steps
  agent: writer
  context:
    - task_research

task_post:
  description: |
    Write a punchy LinkedIn post that makes people STOP scrolling and lean in.
    You're not just promoting a blog—you’re sharing a real developer insight in a way
    that sparks curiosity and conversation.
    
    HOOK FIRST:
    - Open with a relatable pain point, strong question, or surprising moment
    - Make it feel human and specific ("2 AM. Production down. Nobody remembered why...")

    STORY + VALUE:
    - Give a quick glimpse of the challenge and the insight that changed everything
    - Hint at the bigger story or solution (but don’t give it all away)
    - Use plain, conversational language—like talking to a colleague over coffee
    - Add personality (frustration, relief, humor, or excitement) to make it memorable
    
    CALL TO ACTION:
    - Transition naturally: "Here’s what I learned..." / "The full story’s here ↓"
    - Make readers feel curious and that they’ll miss out if they don’t click
    - Keep it authentic, not salesy
    
    LINKEDIN CONTEXT:
    - Posts should be short and scannable (50–100 words max)
    - Use line breaks for rhythm and readability
    - Add 2–4 hashtags that reach the right dev/tech audience
    - Tone: confident but humble, like an experienced dev sharing a lesson learned
    
    GOAL:
    - Create a moment where readers think: "That’s me." + "I need to know more."
    - Drive clicks to the blog while starting conversations in the comments.
  expected_output: |
    - A LinkedIn post of 50–100 words
    - Strong hook in the first line (relatable problem, question, or dramatic moment)
    - Tease of the most valuable blog insight, without full detail
    - Conversational tone, authentic voice, and human emotion
    - Smooth call-to-action that invites reading the blog
    - 2–4 strategic hashtags (#DevOps #AItools #GitHub #Productivity)
    - Short, scannable structure with line breaks
  agent: influencer
  context:
    - task_blog